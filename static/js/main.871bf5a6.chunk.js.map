{"version":3,"sources":["components/layout/Header.jsx","components/TodoItem.jsx","components/Todos.jsx","components/pages/About.jsx","components/AddTodo.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Nav","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Header","Fragment","TodoItem","getStyle","todo","textDecoration","completed","color","this","props","onClick","toggleComplete","bind","style","title","delTodo","Component","Todos","todos","map","key","About","href","AddTodo","state","onChange","e","setState","target","name","value","onSubmit","preventDefault","addTodo","placeholder","required","App","console","log","filter","axios","post","then","res","data","uuidv1","get","HTML","length","options","max","scale","perspective","speed","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.871bf5a6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-light bg-light shadow-sm mb-3\">\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navMenu\"\n        aria-controls=\"navMenu\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navMenu\">\n        <ul className=\"navbar-nav w-100 justify-content-center\">\n          <li className=\"nav-item mx-md-4\">\n            <Link className=\"nav-link\" to=\"/react-todo-app/\">\n              Home\n            </Link>\n          </li>\n          <li className=\"nav-item mx-sm-4\">\n            <Link className=\"nav-link\" to=\"/react-todo-app/about\">\n              About\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nfunction Header() {\n  return (\n    <React.Fragment>\n      <div className=\"bg-dark text-light text-center p-3\">\n        <h1>Todo App</h1>\n      </div>\n      <Nav />\n    </React.Fragment>\n  );\n}\n\nHeader.propTypes = {};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass TodoItem extends Component {\n  getStyle = (todo) => {\n    return {\n      textDecoration: todo.completed ? \"line-through\" : \"none\",\n      color: todo.completed ? \"grey\" : \"black\",\n    };\n  };\n  render() {\n    const { todo } = this.props;\n    return (\n      <div className=\"list-group-item list-group-item-action d-flex justify-content-between\">\n        <div\n          className=\"flex-fill pointer-on-hover\"\n          onClick={this.props.toggleComplete.bind(this, todo.id)}\n        >\n          <small className=\"text-muted d-block\">Title:</small>\n          <p style={this.getStyle(todo)}>{todo.title}</p>\n        </div>\n        <button\n          className=\"align-self-center btn btn-danger\"\n          onClick={this.props.delTodo.bind(this, todo.id)}\n        >\n          âœ•\n        </button>\n      </div>\n    );\n  }\n}\n// Prop types for validation\nTodoItem.propTypes = {\n  toggleComplete: PropTypes.func.isRequired,\n  todo: PropTypes.object.isRequired,\n};\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem.jsx\";\nimport PropTypes from \"prop-types\";\n\nclass Todos extends Component {\n  render() {\n    const { todos, toggleComplete, delTodo } = this.props;\n    return todos.map((todo) => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        toggleComplete={toggleComplete}\n        delTodo={delTodo}\n      />\n    ));\n  }\n}\n// Prop types for validation\nTodos.propTypes = {\n  toggleComplete: PropTypes.func.isRequired,\n  todos: PropTypes.array.isRequired,\n};\nexport default Todos;\n","import React from \"react\";\n\nfunction About() {\n  return (\n    <div className=\"col\">\n      <h1>About</h1>\n      <p>TodoAPP v1.0.0 - React Todo App.</p>\n      <a href=\"https://www.linkedin.com/in/aaronmolinag/\">LinkedIn</a>\n      <br />\n      <a href=\"https://github.com/aaronm-git\">Github</a>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { Component } from \"react\";\n\nexport default class AddTodo extends Component {\n  // component level state\n  state = {\n    title: \"\",\n  };\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.addTodo(this.state.title);\n    this.setState({ title: \"\" });\n  };\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"New todo...\"\n            name=\"title\"\n            value={this.state.title}\n            onChange={this.onChange}\n            required\n          />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\" type=\"submit\">\n              New Todo\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Header from \"./components/layout/Header\";\nimport Todos from \"./components/Todos\";\nimport About from \"./components/pages/About\";\nimport AddTodo from \"./components/AddTodo\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport axios from \"axios\";\nimport Tilt from \"react-tilt\";\n\nclass App extends Component {\n  state = { todos: [] };\n  // toggle todo complete\n  toggleComplete = (id) => {\n    console.log(\"toggle complete task w/ id: \" + id);\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) todo.completed = !todo.completed;\n        return todo;\n      }),\n    });\n  };\n  // delete todo\n  delTodo = (id) => {\n    console.log(\"deleting task w/ id: \" + id);\n    this.setState({\n      todos: [...this.state.todos.filter((todo) => todo.id !== id)],\n    });\n  };\n  // new todo\n  addTodo = (title) => {\n    axios\n      .post(\"https://jsonplaceholder.typicode.com/todos\", {\n        title,\n        completed: false,\n      })\n      .then((res) => {\n        const todo = res.data;\n        todo.id = uuidv1();\n        console.log(todo);\n        this.setState({ todos: [...this.state.todos, todo] });\n      });\n  };\n\n  componentDidMount() {\n    axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=4\").then((res) => {\n      this.setState({ todos: res.data });\n    });\n  }\n\n  render() {\n    let HTML;\n    if (this.state.todos.length) {\n      HTML = () => (\n        <div className=\"col-sm-8 offset-sm-2 col-md-6 offset-md-3\">\n          <div className=\"mt-4\">\n            <AddTodo addTodo={this.addTodo} />\n          </div>\n          <Tilt className=\"list-group shadow Tilt\" options={{ max: 10, scale: 1.03, perspective: 2000, speed: 400 }}>\n            <Todos todos={this.state.todos} toggleComplete={this.toggleComplete} delTodo={this.delTodo} />\n          </Tilt>\n        </div>\n      );\n    } else\n      HTML = () => (\n        <div className=\"col-sm-8 offset-sm-2 col-md-6 offset-md-3\">\n          <div className=\"mt-4\">\n            <AddTodo addTodo={this.addTodo} />\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-muted\">No Dotos Yet!</p>\n          </div>\n        </div>\n      );\n    return (\n      <Router>\n        <Header />\n        <Route exact path=\"/react-todo-app\" render={(props) => HTML()} />\n        <Route exact path=\"/react-todo-app/about\" component={About} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}